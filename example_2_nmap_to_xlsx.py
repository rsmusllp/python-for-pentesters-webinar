#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  example2_nmap_to_xlsx.py
#
#  Copyright 2016 Spencer McIntyre
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following disclaimer
#    in the documentation and/or other materials provided with the
#    distribution.
#  * Neither the name of the  nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
################################################################################
#
#                     Python for Pentesters Example Script
#
# Title: NMap To XLSX
# Description:
#   Process NMap's XML (-oX) output into an XLSX table using Python and the
#   xlsxwriter module.
#
# Post Webinar Challenge:
#   Look into creating a worksheet table with the xlsxwriter API. This will
#   allow excel to filter the columns based on address, port etc. making it
#   easier to find interesting targets.
#
################################################################################

from __future__ import print_function
from __future__ import unicode_literals

import xml.etree.ElementTree as ET
import sys

import xlsxwriter

def nmap_xml_to_xlsx(root_node, worksheet):
	# write header intormation to the top row, column by column, using enumerate
	# we can get the iteration number (col) in addition to the value (cell)
	for col, cell in enumerate(('IP Address', 'Port', 'Port State')):
		worksheet.write(0, col, cell)

	row = 1  # start at one because we just wrote header row
	# we're going to iterate over host, port and state nodes in that order using
	# a combination of .iter, .get and .find to extract information from nodes
	for host_node in root_node.iter('host'):
		address = host_node.find('address').get('addr')
		for port_node in host_node.iter('port'):
			# we're using pythons string.format method to easily determine where
			# the variables will be placed
			port_info = "{}/{}".format(port_node.get('protocol'), port_node.get('portid'))

			state_node = port_node.find('state')
			state_info = "{} (reason: {})".format(state_node.get('state'), state_node.get('reason'))

			# at this point we have the address, port information and state
			# information so it's time to write these three cells to a single
			# row in the worksheet
			for col, cell in enumerate((address, port_info, state_info)):
				worksheet.write(row, col, cell)
			row += 1

def main():
	if len(sys.argv) < 3:
		print("usage: {0} [input] [output]".format(sys.argv[0]))
		print('  input:  the nmap xml file to process')
		print('  output: the path to write the xlsx file to')
		return 0

	# start out by parsing the XML file with the ElementTree module
	nmap_tree = ET.parse(sys.argv[1])
	output_path = sys.argv[2]

	# set the extension appropriately if it wasn't specified
	if not output_path.endswith('.xlsx'):
		output_path += '.xlsx'

	# create a new Workbook instance
	workbook = xlsxwriter.Workbook(output_path)
	# add a new work sheet where the results will be placed
	worksheet = workbook.add_worksheet()
	nmap_xml_to_xlsx(nmap_tree.getroot(), worksheet)
	workbook.close()
	return 0

if __name__ == '__main__':
	sys.exit(main())
